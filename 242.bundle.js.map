{"version":3,"file":"242.bundle.js","mappings":"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","sources":["webpack://frontend-performance-basecamp/./src/apis/gifAPIService.ts","webpack://frontend-performance-basecamp/./src/pages/Search/hooks/useGifSearch.tsx","webpack://frontend-performance-basecamp/./src/pages/Search/components/SearchBar/SearchBar.module.css?6e52","webpack://frontend-performance-basecamp/./src/pages/Search/components/SearchBar/SearchBar.tsx","webpack://frontend-performance-basecamp/./src/pages/Search/components/ResultTitle/ResultTitle.module.css?5009","webpack://frontend-performance-basecamp/./src/pages/Search/components/ResultTitle/ResultTitle.tsx","webpack://frontend-performance-basecamp/./src/pages/Search/components/GifItem/GifItem.module.css?f94b","webpack://frontend-performance-basecamp/./src/pages/Search/components/GifItem/GifItem.tsx","webpack://frontend-performance-basecamp/./src/pages/Search/components/SearchResult/SearchResult.module.css?fa48","webpack://frontend-performance-basecamp/./src/pages/Search/components/SearchResult/SearchResult.tsx","webpack://frontend-performance-basecamp/./src/models/help/artist.ts","webpack://frontend-performance-basecamp/./src/constants/artistData.ts","webpack://frontend-performance-basecamp/./src/pages/Search/components/ArtistInfo/ArtistInfo.module.css?1a7e","webpack://frontend-performance-basecamp/./src/pages/Search/components/ArtistInfo/ArtistInfo.tsx","webpack://frontend-performance-basecamp/./src/pages/Search/components/ArtistList/ArtistList.tsx","webpack://frontend-performance-basecamp/./src/pages/Search/components/HelpPanel/HelpPanel.module.css?d962","webpack://frontend-performance-basecamp/./src/pages/Search/components/HelpPanel/HelpPanel.tsx","webpack://frontend-performance-basecamp/./src/pages/Search/Search.module.css?33b5","webpack://frontend-performance-basecamp/./src/pages/Search/Search.tsx"],"sourcesContent":["import { GifsResult, GiphyFetch, SearchOptions } from '@giphy/js-fetch-api';\nimport { IGif } from '@giphy/js-types';\n\nimport { GifImageModel } from '../models/image/gifImage';\n\nconst apiKey = process.env.GIPHY_API_KEY || '';\nconst gf = new GiphyFetch(apiKey);\n\nconst DEFAULT_FETCH_COUNT = 16;\nconst TRENDING_GIF_API = `https://api.giphy.com/v1/gifs/trending?api_key=${process.env.GIPHY_API_KEY}&limit=${DEFAULT_FETCH_COUNT}&rating=g`;\n\nfunction convertResponseToModel(gifList: IGif[]): GifImageModel[] {\n  return gifList.map((gif) => {\n    const { id, title, images } = gif;\n\n    return {\n      id,\n      title,\n      imageUrl: images.original.url\n    };\n  });\n}\n\nexport const gifAPIService = {\n  /**\n   * treding gif 목록을 가져옵니다.\n   * @returns {Promise<GifImageModel[]>}\n   * @ref https://developers.giphy.com/docs/api/endpoint#!/gifs/trending\n   */\n  getTrending: async function (): Promise<GifImageModel[]> {\n    try {\n      const gifs: GifsResult = await fetch(TRENDING_GIF_API).then((res) => res.json());\n      return convertResponseToModel(gifs.data);\n    } catch (e) {\n      return [];\n    }\n  },\n  /**\n   * 검색어에 맞는 gif 목록을 가져옵니다.\n   * @param {string} keyword\n   * @param {number} page\n   * @returns {Promise<GifImageModel[]>}\n   * @ref https://developers.giphy.com/docs/api/endpoint#!/gifs/search\n   */\n  searchByKeyword: async function (keyword: string, page: number): Promise<GifImageModel[]> {\n    const searchOptions: SearchOptions = {\n      limit: DEFAULT_FETCH_COUNT,\n      lang: 'en',\n      offset: page * DEFAULT_FETCH_COUNT\n    };\n\n    try {\n      const gifs: GifsResult = await gf.search(keyword, searchOptions);\n      return convertResponseToModel(gifs.data);\n    } catch (e) {\n      return [];\n    }\n  }\n};\n","import { ChangeEvent, useEffect, useState } from 'react';\n\nimport { gifAPIService } from '../../../apis/gifAPIService';\nimport { GifImageModel } from '../../../models/image/gifImage';\n\nconst DEFAULT_PAGE_INDEX = 0;\n\nexport const SEARCH_STATUS = {\n  BEFORE_SEARCH: 'BEFORE_SEARCH',\n  LOADING: 'LOADING',\n  FOUND: 'FOUND',\n  NO_RESULT: 'NO_RESULT'\n} as const;\n\nexport type SearchStatus = typeof SEARCH_STATUS[keyof typeof SEARCH_STATUS];\n\nconst useGifSearch = () => {\n  const [status, setStatus] = useState<SearchStatus>(SEARCH_STATUS.BEFORE_SEARCH);\n  const [currentPageIndex, setCurrentPageIndex] = useState(DEFAULT_PAGE_INDEX);\n  const [gifList, setGifList] = useState<GifImageModel[]>([]);\n  const [searchKeyword, setSearchKeyword] = useState('');\n\n  const updateSearchKeyword = (e: ChangeEvent<HTMLInputElement>) => {\n    setSearchKeyword(e.target.value);\n  };\n\n  const resetSearch = () => {\n    setStatus(SEARCH_STATUS.LOADING);\n    setCurrentPageIndex(DEFAULT_PAGE_INDEX);\n  };\n\n  const searchByKeyword = async () => {\n    resetSearch();\n\n    const gifs: GifImageModel[] = await gifAPIService.searchByKeyword(\n      searchKeyword,\n      DEFAULT_PAGE_INDEX\n    );\n\n    if (gifs.length === 0) {\n      setStatus(SEARCH_STATUS.NO_RESULT);\n      return;\n    }\n\n    setGifList(gifs);\n    setStatus(SEARCH_STATUS.FOUND);\n  };\n\n  const loadMore = async () => {\n    const nextPageIndex = currentPageIndex + 1;\n    const gifs: GifImageModel[] = await gifAPIService.searchByKeyword(searchKeyword, nextPageIndex);\n\n    setGifList([...gifList, ...gifs]);\n    setCurrentPageIndex(nextPageIndex);\n  };\n\n  useEffect(() => {\n    const fetch = async () => {\n      if (status === SEARCH_STATUS.BEFORE_SEARCH) {\n        const gifs: GifImageModel[] = await gifAPIService.getTrending();\n\n        setGifList(gifs);\n      }\n    };\n    fetch();\n\n    return () => setStatus(SEARCH_STATUS.LOADING);\n  }, []);\n\n  return {\n    status,\n    searchKeyword,\n    gifList,\n    searchByKeyword,\n    updateSearchKeyword,\n    loadMore\n  } as const;\n};\n\nexport default useGifSearch;\n","// extracted by mini-css-extract-plugin\nexport default {\"searchbarSection\":\"aRAMtZSIfGDKTaz0FZ6g\",\"searchbarContainer\":\"cuYbnWWxBSJ7CjWv9M5E\",\"searchbarTitle\":\"L02WjVHMcCKSamsemBUW\",\"searchInput\":\"WgbaIKYgUqh2YtyTfNtt\",\"searchButton\":\"bM_W2HWnsNuR3urC4Ld4\"};","import React from 'react';\nimport { AiOutlineSearch } from 'react-icons/ai';\n\nimport styles from './SearchBar.module.css';\n\ntype SearchbarProps = {\n  searchKeyword: string;\n  onEnter: (e: React.KeyboardEvent<HTMLInputElement>) => void;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  onSearch: () => void;\n};\n\nconst SearchBar = ({ searchKeyword, onEnter, onChange, onSearch }: SearchbarProps) => {\n  return (\n    <section className={styles.searchbarSection}>\n      <h3 className={styles.searchbarTitle}>- find the best gif now - </h3>\n      <div className={styles.searchbarContainer}>\n        <input\n          className={styles.searchInput}\n          type=\"text\"\n          value={searchKeyword}\n          onKeyPress={onEnter}\n          onChange={onChange}\n        />\n        <button className={styles.searchButton} type=\"button\" onClick={onSearch}>\n          <AiOutlineSearch color=\"white\" size=\"2rem\" />\n        </button>\n      </div>\n    </section>\n  );\n};\n\nexport default SearchBar;\n","// extracted by mini-css-extract-plugin\nexport default {\"resultTitle\":\"_GygpXAhTspi4YBqMlOC\"};","import { SearchStatus, SEARCH_STATUS } from '../../hooks/useGifSearch';\n\nimport styles from './ResultTitle.module.css';\n\ntype ResultTitleProps = {\n  status: SearchStatus;\n};\n\nconst ResultTitle = ({ status }: ResultTitleProps) => {\n  switch (status) {\n    case SEARCH_STATUS.NO_RESULT:\n      return (\n        <h3 className={styles.resultTitle}>\n          <span>Nothing</span>🥲\n        </h3>\n      );\n    case SEARCH_STATUS.BEFORE_SEARCH:\n      return (\n        <h3 className={styles.resultTitle}>\n          🔥 <span>Trending Now</span> 🔥\n        </h3>\n      );\n    default:\n      return (\n        <h3 className={styles.resultTitle}>\n          <span>We Found...</span>\n        </h3>\n      );\n  }\n};\n\nexport default ResultTitle;\n","// extracted by mini-css-extract-plugin\nexport default {\"gifItem\":\"iF_ihlnsqrUR2PHkJHXd\",\"gifImage\":\"_Z_HD3pAf_FMoXUfzrc1\",\"gifTitleContainer\":\"_isYYLSM6s_JUr_zpmr2\",\"gifTitleBg\":\"qnrB_HA_IiiJQM_w29oT\",\"gifTitle\":\"IaX81dIK0V7U_lVt5cJu\"};","import { GifImageModel } from '../../../../models/image/gifImage';\n\nimport styles from './GifItem.module.css';\n\ntype GifItemProps = Omit<GifImageModel, 'id'>;\n\nconst GifItem = ({ imageUrl = '', title = '' }: GifItemProps) => {\n  return (\n    <div className={styles.gifItem}>\n      <img className={styles.gifImage} src={imageUrl} />\n      <div className={styles.gifTitleContainer}>\n        <div className={styles.gifTitleBg}></div>\n        <h4 className={styles.gifTitle}>{title}</h4>\n      </div>\n    </div>\n  );\n};\n\nexport default GifItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"searchResultSection\":\"OOZLwgzHpPcLKH5PGAH0\",\"gifResultWrapper\":\"gSxnq7k_oS2kvGYK_jWx\",\"loadMoreButton\":\"saVr_MQXtpwAT1HiyB1a\"};","import { GifImageModel } from '../../../../models/image/gifImage';\n\nimport ResultTitle from '../ResultTitle/ResultTitle';\nimport GifItem from '../GifItem/GifItem';\n\nimport { SearchStatus, SEARCH_STATUS } from '../../hooks/useGifSearch';\n\nimport styles from './SearchResult.module.css';\n\ntype SearchResultProps = {\n  status: SearchStatus;\n  gifList: GifImageModel[];\n  loadMore: () => void;\n};\n\nconst SearchResult = ({ status, gifList, loadMore }: SearchResultProps) => {\n  return (\n    <section className={styles.searchResultSection}>\n      <ResultTitle status={status} />\n      {(status === SEARCH_STATUS.FOUND || status === SEARCH_STATUS.BEFORE_SEARCH) && (\n        <div className={styles.gifResultWrapper}>\n          {gifList.map((gif: GifImageModel) => (\n            <GifItem key={gif.id} imageUrl={gif.imageUrl} title={gif.title} />\n          ))}\n        </div>\n      )}\n      {status === SEARCH_STATUS.FOUND && (\n        <button className={styles.loadMoreButton} onClick={loadMore}>\n          load more\n        </button>\n      )}\n    </section>\n  );\n};\n\nexport default SearchResult;\n","export const Artist = ({ name = '', profileUrl = '', profileImageUrl = '' }) => ({\n  name,\n  profileUrl,\n  profileImageUrl\n});\n\nexport interface Artist extends ReturnType<typeof Artist> {}\n","import { Artist } from '../models/help/artist';\n\nconst DUMMY_ARTISTS_LENGTH = 500;\nconst dummyArtists: Artist[] = [\n  {\n    name: 'Pola Lucas',\n    profileUrl: 'https://giphy.com/polalucas',\n    profileImageUrl: 'https://media4.giphy.com/media/gwWAA4PYJLTtyOHkUD/giphy.gif'\n  },\n  {\n    name: 'Yizr',\n    profileUrl: 'https://giphy.com/yizr',\n    profileImageUrl: 'https://media.giphy.com/avatars/yizr/llqaOJQnpDWZ/200h.gif'\n  },\n  {\n    name: 'YUNGSUNG',\n    profileUrl: 'https://giphy.com/yungsung',\n    profileImageUrl: 'https://media0.giphy.com/media/lgnOH6bhb1QpUm2k6w/giphy.gif'\n  },\n  {\n    name: 'Kev Lavery',\n    profileUrl: 'https://giphy.com/kevlavery',\n    profileImageUrl: 'https://media1.giphy.com/media/ZPLluhRJiGwSttn7i2/giphy.gif'\n  },\n  {\n    name: 'Lorna Mills',\n    profileUrl: 'https://giphy.com/lornamills',\n    profileImageUrl: 'https://media1.giphy.com/media/l0Iyn1gGtCPa3x41a/200.gif'\n  }\n];\n\nexport const artists = Array.from({ length: DUMMY_ARTISTS_LENGTH }, (_v, k) =>\n  Artist(dummyArtists[k % dummyArtists.length])\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"artistContainer\":\"db3XaxLJQvyq3DpNIUTs\",\"profileImage\":\"_jL0eWZ2GhM6QCo6GFuV\",\"profileUrl\":\"K_T_pLqrzZbNukMfT1b6\"};","import { Artist } from '../../../../models/help/artist';\n\nimport styles from './ArtistInfo.module.css';\n\nexport type ArtistProps = {\n  artist: Artist;\n};\n\nconst ArtistInfo = ({ artist }: ArtistProps) => {\n  const { name, profileUrl, profileImageUrl } = artist;\n\n  return (\n    <li className={styles.artistContainer}>\n      <img className={styles.profileImage} src={profileImageUrl} />\n      <p>\n        <a className={styles.profileUrl} href={profileUrl}>\n          {name}\n        </a>\n      </p>\n    </li>\n  );\n};\n\nexport default ArtistInfo;\n","import { Artist } from '../../../../models/help/artist';\nimport ArtistInfo from '../ArtistInfo/ArtistInfo';\n\ntype ArtistListProps = {\n  artists: Artist[];\n};\n\nconst ArtistList = ({ artists }: ArtistListProps) => {\n  return (\n    <ul>\n      {artists.map((artist, index) => {\n        return <ArtistInfo key={index} artist={artist} />;\n      })}\n    </ul>\n  );\n};\n\nexport default ArtistList;\n","// extracted by mini-css-extract-plugin\nexport default {\"floatingButton\":\"yrNhQsm_5BXmrguDXOrQ\",\"selectedItemContainer\":\"_3tSnNmXUDBozS7tuXSl\",\"showSheet\":\"VhKQM6QT8l1TfvMrCiUX\",\"sheetTitleContainer\":\"gbPhdbktVbHB5Ld1umlT\",\"sheetContentsContainer\":\"sxFgoXAxrkttkC5wjMVP\"};","import { useState } from 'react';\nimport { AiOutlineInfo, AiOutlineClose } from 'react-icons/ai';\nimport classNames from 'classnames/bind';\n\nimport { artists } from '../../../../constants/artistData';\nimport ArtistList from '../ArtistList/ArtistList';\n\nimport styles from './HelpPanel.module.css';\n\nconst HelpPanel = () => {\n  const [isShow, setIsShow] = useState(false);\n  const openSheet = () => setIsShow(true);\n  const closeSheet = () => setIsShow(false);\n\n  return (\n    <>\n      <button type=\"button\" className={styles.floatingButton} onClick={openSheet}>\n        <AiOutlineInfo color=\"white\" size=\"24px\" />\n      </button>\n      <section\n        className={classNames(styles.selectedItemContainer, {\n          [styles.showSheet]: isShow\n        })}\n      >\n        <div className={styles.sheetTitleContainer}>\n          <h4>What's all this? </h4>\n          <button type=\"button\" onClick={closeSheet}>\n            <AiOutlineClose size=\"24px\" />\n          </button>\n        </div>\n        <div className={styles.sheetContentsContainer}>\n          <img src=\"https://media0.giphy.com/media/3oKIPdiPGxPI7Dze7u/giphy.gif?cid=ecf05e475f5bct6ci09g3pgn43nf6bausx33fj7f96f6ig92&rid=giphy.gif&ct=g\" />\n          <p>\n            'memegle' is powered by GIPHY, the top source for the best & newest GIFs & Animated\n            Stickers online. You can find any gif uploaded on GIPHY here.\n          </p>\n          <br />\n\n          <img src=\"https://giphy.com/static/img/artistdirectory_1040.gif\" />\n          <p>\n            If you want more, you are always welcome to contribute as an artist. Please refer to the\n            guideline&nbsp;\n            <a href=\"https://support.giphy.com/hc/en-us/articles/360019977552-How-to-Upload\">\n              here\n            </a>\n            &nbsp;and upload your work!\n          </p>\n          <br />\n          <p>Here are some artists you can refer to.</p>\n          <br />\n          <section>\n            <ArtistList artists={artists} />\n          </section>\n        </div>\n      </section>\n    </>\n  );\n};\n\nexport default HelpPanel;\n","// extracted by mini-css-extract-plugin\nexport default {\"searchContainer\":\"tIDt1z4TsayEnXwSHU9i\",\"searchbarSection\":\"tNx244kPT15nrukI2OKS\",\"searchbarContainer\":\"Sn_KzXze5v3i3RZZGD2i\",\"searchbarTitle\":\"Gl7JZsukzExiOvPD_dwE\",\"searchInput\":\"VJMrbxTJDXDJgIcfDtL_\",\"searchButton\":\"vOFFS_HsB2uFzaoTjct3\",\"searchIcon\":\"pOzYYmdXWSHaXAsszIEd\",\"searchResultSection\":\"wDXkIg0c_oQ1Q3Qn5oka\",\"resultTitle\":\"rixjGay9cOYegBMwSKPT\",\"gifResultWrapper\":\"QNKeKFjtw_3nNUvEhiuv\",\"loadMoreButton\":\"_zhK3awUnme7QvPUfBkH\"};","import { KeyboardEvent } from 'react';\nimport useGifSearch from './hooks/useGifSearch';\n\nimport SearchBar from './components/SearchBar/SearchBar';\nimport SearchResult from './components/SearchResult/SearchResult';\nimport HelpPanel from './components/HelpPanel/HelpPanel';\n\nimport styles from './Search.module.css';\n\nconst Search = () => {\n  const { status, searchKeyword, gifList, searchByKeyword, updateSearchKeyword, loadMore } =\n    useGifSearch();\n\n  const handleEnter = (e: KeyboardEvent<HTMLInputElement>) => {\n    if (e.key !== 'Enter') {\n      return;\n    }\n\n    searchByKeyword();\n  };\n\n  return (\n    <div className={styles.searchContainer}>\n      <SearchBar\n        searchKeyword={searchKeyword}\n        onEnter={handleEnter}\n        onChange={updateSearchKeyword}\n        onSearch={searchByKeyword}\n      />\n      <SearchResult status={status} gifList={gifList} loadMore={loadMore} />\n      <HelpPanel />\n    </div>\n  );\n};\n\nexport default Search;\n"],"names":["gf","GiphyFetch","convertResponseToModel","gifList","map","gif","id","title","images","imageUrl","original","url","gifAPIService","getTrending","fetch","then","res","json","data","e","searchByKeyword","keyword","page","searchOptions","limit","lang","offset","search","SEARCH_STATUS","status","setStatus","useState","currentPageIndex","setCurrentPageIndex","setGifList","searchKeyword","setSearchKeyword","useEffect","gifs","length","updateSearchKeyword","target","value","loadMore","nextPageIndex","onEnter","onChange","onSearch","className","type","onKeyPress","onClick","color","size","src","dummyArtists","name","profileUrl","profileImageUrl","artists","Array","from","_v","k","Artist","artist","href","index","isShow","setIsShow","key"],"sourceRoot":""}